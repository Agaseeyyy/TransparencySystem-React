package com.agaseeyyy.transparencysystem.dto;

import java.math.BigDecimal;
import java.time.LocalDate;

import com.agaseeyyy.transparencysystem.expenses.Expenses.ExpenseCategory;
import com.agaseeyyy.transparencysystem.expenses.Expenses.PaymentMethod;
import com.agaseeyyy.transparencysystem.expenses.Expenses.RecurringFrequency;
import com.fasterxml.jackson.databind.annotation.JsonDeserialize;
import com.agaseeyyy.transparencysystem.util.RecurringFrequencyDeserializer;

// Import validation constraints
import jakarta.validation.constraints.*; 

/**
 * DTO for creating or updating an expense
 */
public class ExpenseInputDTO {
    
    // expenseReference is usually generated by backend, so not validated here if backend generates it
    // If front-end can suggest one, then add @Size for example.
    private String expenseReference;

    @NotBlank(message = "Expense title is required")
    @Size(max = 255, message = "Expense title cannot exceed 255 characters")
    private String expenseTitle;

    @NotNull(message = "Expense category is required")
    private ExpenseCategory expenseCategory;

    @NotNull(message = "Amount is required")
    @DecimalMin(value = "0.01", message = "Amount must be greater than 0.00")
    @Digits(integer = 8, fraction = 2, message = "Amount must be a valid monetary value with up to 8 integer and 2 decimal places")
    private BigDecimal amount;

    @Size(max = 1000, message = "Description cannot exceed 1000 characters")
    private String expenseDescription;

    @Size(max = 255, message = "Vendor/Supplier name cannot exceed 255 characters")
    private String vendorSupplier;

    @Size(max = 100, message = "Receipt/Invoice number cannot exceed 100 characters")
    private String receiptInvoiceNumber;

    @NotNull(message = "Expense date is required")
    @PastOrPresent(message = "Expense date cannot be in the future")
    private LocalDate expenseDate;

    @PastOrPresent(message = "Payment date cannot be in the future")
    private LocalDate paymentDate; // Optional, but if present, must be past or present

    // paymentMethod is optional on input based on current frontend defaults, can be null
    private PaymentMethod paymentMethod;

    @NotBlank(message = "Budget allocation is required")
    @Size(max = 100, message = "Budget allocation cannot exceed 100 characters")
    private String budgetAllocation;
    
    @NotNull(message = "'Is Recurring' flag must be provided (true or false)")
    private Boolean isRecurring;
    
    @JsonDeserialize(using = RecurringFrequencyDeserializer.class)
    // recurringFrequency is conditionally required if isRecurring is true.
    // This typically requires a class-level custom validator or service-level check.
    // For DTO validation, we can ensure it fits enum if provided.
    private RecurringFrequency recurringFrequency; 
    
    @Size(max = 10, message = "Academic year cannot exceed 10 characters") // e.g., "2023-2024"
    // @Pattern(regexp = "^\\d{4}-\\d{4}$", message = "Academic year must be in YYYY-YYYY format") // Optional more specific pattern
    private String academicYear; // Can be null if not always applicable from start

    @NotBlank(message = "Semester is required")
    @Size(max = 20, message = "Semester cannot exceed 20 characters")
    private String semester;

    @Digits(integer = 8, fraction = 2, message = "Tax amount must be a valid monetary value with up to 8 integer and 2 decimal places")
    @DecimalMin(value = "0.00", message = "Tax amount cannot be negative")
    private BigDecimal taxAmount; // Optional

    @NotNull(message = "'Is Tax Inclusive' flag must be provided (true or false)")
    private Boolean isTaxInclusive;

    @Size(max = 1000, message = "Remarks cannot exceed 1000 characters")
    private String remarks;
    
    // departmentId can be null if an expense doesn't belong to a department
    @NotBlank(message = "Department ID is required")
    private String departmentId; 

    @NotNull(message = "Related Fee ID is required")
    private Integer relatedFeeId;
    
    @Size(max = 500, message = "Documentation path cannot exceed 500 characters")
    private String documentationPath; // Path to uploaded documentation/receipts
    
    // Default constructor
    public ExpenseInputDTO() {}
    
    // Getters and setters
    public String getExpenseReference() {
        return expenseReference;
    }
    
    public void setExpenseReference(String expenseReference) {
        this.expenseReference = expenseReference;
    }
    
    public String getExpenseTitle() {
        return expenseTitle;
    }
    
    public void setExpenseTitle(String expenseTitle) {
        this.expenseTitle = expenseTitle;
    }
    
    public ExpenseCategory getExpenseCategory() {
        return expenseCategory;
    }
    
    public void setExpenseCategory(ExpenseCategory expenseCategory) {
        this.expenseCategory = expenseCategory;
    }
    
    public BigDecimal getAmount() {
        return amount;
    }
    
    public void setAmount(BigDecimal amount) {
        this.amount = amount;
    }
    
    public String getExpenseDescription() {
        return expenseDescription;
    }
    
    public void setExpenseDescription(String expenseDescription) {
        this.expenseDescription = expenseDescription;
    }
    
    public String getVendorSupplier() {
        return vendorSupplier;
    }
    
    public void setVendorSupplier(String vendorSupplier) {
        this.vendorSupplier = vendorSupplier;
    }
    
    public String getReceiptInvoiceNumber() {
        return receiptInvoiceNumber;
    }
    
    public void setReceiptInvoiceNumber(String receiptInvoiceNumber) {
        this.receiptInvoiceNumber = receiptInvoiceNumber;
    }
    
    public LocalDate getExpenseDate() {
        return expenseDate;
    }
    
    public void setExpenseDate(LocalDate expenseDate) {
        this.expenseDate = expenseDate;
    }
    
    public LocalDate getPaymentDate() {
        return paymentDate;
    }
    
    public void setPaymentDate(LocalDate paymentDate) {
        this.paymentDate = paymentDate;
    }
    
    public PaymentMethod getPaymentMethod() {
        return paymentMethod;
    }
    
    public void setPaymentMethod(PaymentMethod paymentMethod) {
        this.paymentMethod = paymentMethod;
    }
    
    public String getBudgetAllocation() {
        return budgetAllocation;
    }
    
    public void setBudgetAllocation(String budgetAllocation) {
        this.budgetAllocation = budgetAllocation;
    }
    
    public Boolean getIsRecurring() {
        return isRecurring;
    }
    
    public void setIsRecurring(Boolean isRecurring) {
        this.isRecurring = isRecurring;
    }
    
    public RecurringFrequency getRecurringFrequency() {
        return recurringFrequency;
    }
    
    public void setRecurringFrequency(RecurringFrequency recurringFrequency) {
        this.recurringFrequency = recurringFrequency;
    }
    
    public String getAcademicYear() {
        return academicYear;
    }
    
    public void setAcademicYear(String academicYear) {
        this.academicYear = academicYear;
    }
    
    public String getSemester() {
        return semester;
    }
    
    public void setSemester(String semester) {
        this.semester = semester;
    }
    
    public BigDecimal getTaxAmount() {
        return taxAmount;
    }
    
    public void setTaxAmount(BigDecimal taxAmount) {
        this.taxAmount = taxAmount;
    }
    
    public Boolean getIsTaxInclusive() {
        return isTaxInclusive;
    }
    
    public void setIsTaxInclusive(Boolean isTaxInclusive) {
        this.isTaxInclusive = isTaxInclusive;
    }
    
    public String getRemarks() {
        return remarks;
    }
    
    public void setRemarks(String remarks) {
        this.remarks = remarks;
    }
    
    public String getDepartmentId() {
        return departmentId;
    }
    
    public void setDepartmentId(String departmentId) {
        this.departmentId = departmentId;
    }
    
    public Integer getRelatedFeeId() {
        return relatedFeeId;
    }
    
    public void setRelatedFeeId(Integer relatedFeeId) {
        this.relatedFeeId = relatedFeeId;
    }
    
    public String getDocumentationPath() {
        return documentationPath;
    }
    
    public void setDocumentationPath(String documentationPath) {
        this.documentationPath = documentationPath;
    }
}
